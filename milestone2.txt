tag 0.2.0
Tagger: Pongsakorn SAMOTONG <pongsakorn.sam@student.mahidol.edu>
Date:   Mon Jun 21 23:34:27 2021 +0700


commit da7f516bfa3117c811067a60e6a4deda743ec9e0
Author: Pongsakorn SAMOTONG <pongsakorn.sam@student.mahidol.edu>
Date:   Mon Jun 21 23:24:56 2021 +0700

    commit on main

diff --git a/Makefile b/Makefile
index bd48a28..9092df7 100644
--- a/Makefile
+++ b/Makefile
@@ -8,17 +8,19 @@ OBJ := $(OBJ_DIR)/y.tab.o $(OBJ_DIR)/lex.yy.o $(OBJ_DIR)/parse.o $(OBJ_DIR)/icws
 BIN := icws
 # C compiler
 CC  := gcc
+CCP := g++
 # C PreProcessor Flag
 CPPFLAGS := 
 # compiler flags
 CFLAGS   := -g -Wall
 # DEPS = parse.h y.tab.h
+LIBFLAGS := -pthread -lpthread
 
 default: all
 all : icws
 
 icws: $(OBJ)
-	$(CC) $^ -o $@
+	$(CCP) $^ -o $@ $(LIBFLAGS)
 
 $(SRC_DIR)/lex.yy.c: $(SRC_DIR)/lexer.l
 	flex -o $@ $^
@@ -29,7 +31,10 @@ $(SRC_DIR)/y.tab.c: $(SRC_DIR)/parser.y
 	mv y.tab.h $(SRC_DIR)/y.tab.h
 
 $(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(OBJ_DIR)
-	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
+	$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBFLAGS) -c $< -o $@
+
+$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp $(OBJ_DIR)
+	$(CCP) $(CPPFLAGS) $(CFLAGS) $(LIBFLAGS) -c $< -o $@
 
 #echo_server: $(OBJ_DIR)/echo_server.o
 #	$(CC) -Werror $^ -o $@
diff --git a/icws b/icws
index 281e149..11246b2 100644
Binary files a/icws and b/icws differ
diff --git a/obj/icws.o b/obj/icws.o
index 7661107..d81d95f 100644
Binary files a/obj/icws.o and b/obj/icws.o differ
diff --git a/sample-www/cat2.jpg b/sample-www/cat2.jpg
new file mode 100644
index 0000000..8972091
Binary files /dev/null and b/sample-www/cat2.jpg differ
diff --git a/sample-www/cat3.jpg b/sample-www/cat3.jpg
new file mode 100644
index 0000000..8972091
Binary files /dev/null and b/sample-www/cat3.jpg differ
diff --git a/sample-www/cat4.jpg b/sample-www/cat4.jpg
new file mode 100644
index 0000000..8972091
Binary files /dev/null and b/sample-www/cat4.jpg differ
diff --git a/sample-www/index.html b/sample-www/index.html
index 709e9e9..da55ee2 100644
--- a/sample-www/index.html
+++ b/sample-www/index.html
@@ -14,6 +14,9 @@ body {
     <p>Serving this from our very own web server!</p>
     
     If the MIME type is set up correctly, you should be able to see an image below as well:<br />
-    <img src="cat.jpg" width="480px" alt="Cat">
+    <img src="cat.jpg" width="120px" alt="Cat">
+    <img src="cat2.jpg" width="120px" alt="Cat2">
+    <img src="cat3.jpg" width="120px" alt="Cat3">
+    <img src="cat4.jpg" width="120px" alt="Cat4">
 </body>
 </html>
diff --git a/src/icws.c b/src/icws.c
index 4ec003a..40ca4e5 100644
--- a/src/icws.c
+++ b/src/icws.c
@@ -10,13 +10,34 @@
 #include "pcsa_net.h"
 #include <getopt.h>
 #include "parse.h"
+#include <pthread.h>
 #include "time.h"
 
 /* Rather arbitrary. In real life, be careful with buffer overflow */
-#define MAXBUF 1024
+#define MAXBUF 8192 
 
 typedef struct sockaddr SA;
 
+
+/* TODOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO */
+typedef struct Task{
+    struct sockaddr_storage clientAddr;
+    int connFd;
+    char wwwRoot[MAXBUF];
+} Task;
+
+Task taskQueue[256];
+
+
+int taskCount = 0;
+pthread_mutex_t mutexQueue;
+pthread_mutex_t parseQueue;
+pthread_cond_t condQueue;
+//////////////////////////////////////////////////////////
+
+
+
+
 void respond_server(int connFd, char *path, int get) {
     char buf[MAXBUF];
     ssize_t numRead;
@@ -27,6 +48,10 @@ void respond_server(int connFd, char *path, int get) {
     char* ext = strrchr(path, '.');
     ext = ext+1;
 
+    time_t t = time(NULL);
+    struct tm *tm = localtime(&t);
+    char date[50];
+
     if(stat(path, &s)>=0) {
         if(strcmp(ext, "html")==0) type = "text/html";
         else if(strcmp(ext, "jpg")==0) type = "image/jpg";
@@ -43,9 +68,7 @@ void respond_server(int connFd, char *path, int get) {
             return ;
         }
 
-        time_t t = time(NULL);
-        struct tm *tm = localtime(&t);
-        char date[50];
+
         strftime(date,sizeof(date),"%c",tm);   
         struct stat filestat;
         stat(path,&filestat);
@@ -61,8 +84,15 @@ void respond_server(int connFd, char *path, int get) {
         write_all(connFd, buf, strlen(buf));
 
     }else{
-        sprintf(buf,"Error 404, File not found\r\n");
+            sprintf(buf,
+            "HTTP/1.1 404 NOT OK\r\n"
+            "Date: %s\r\n"
+            "Server: Tiny\r\n"
+            "Connection: close\r\n"
+            "Content-type: NULL\r\n"
+            ,date, type);
         write_all(connFd,buf, strlen(buf));
+        return ;
     }
 
     if(get == 1){
@@ -80,24 +110,34 @@ void respond_server(int connFd, char *path, int get) {
 
 void serve_http(int connFd, char *rootFolder) {
     char buf[MAXBUF];
-
-    int readRet = read(connFd,buf,8192);
-    if (!readRet) 
-        return ;  /* Quit if we can't read the first line */
-    // printf("LOG: %s\n", buf);
+    char sbuf[MAXBUF];
+    int readRet;
+    while((readRet = read(connFd,sbuf,MAXBUF)) > 0){
+        strcat(buf,sbuf);
+        memset(sbuf,0,MAXBUF);
+        if(strstr(buf, "\r\n\r\n") != NULL) break;
+    }
+    pthread_mutex_lock(&parseQueue);
+    Request *request = parse(buf,sizeof(buf),connFd);
+    pthread_mutex_unlock(&parseQueue);
+    if (!readRet) return ;  
     /* [METHOD] [URI] [HTTPVER] */
-
-    Request *request = parse(buf,readRet,connFd);
     if(request == NULL){
         return ;
     }
-
     if(strcmp(request->http_version,"HTTP/1.1") != 0){
-        sprintf(buf,"Error 505, bad version numbers\r\n");
+            time_t t = time(NULL);
+            struct tm *tm = localtime(&t);
+            char date[50];
+            strftime(date,sizeof(date),"%c",tm); 
+            sprintf(buf,
+            "HTTP/1.1 505 NOT OK\r\n"
+            "Server: Tiny\r\n"
+            "Connection: close\r\n"
+            "Content-type: NULL\r\n",date);
         write_all(connFd,buf, strlen(buf));
         return ;
     }
-
     if(strcasecmp(request->http_method, "GET") == 0 && request->http_uri[0] == '/'){
         char path[MAXBUF];
         strcpy(path, rootFolder);
@@ -112,14 +152,59 @@ void serve_http(int connFd, char *rootFolder) {
         printf("LOG: Sending %s\n", path);
         respond_server(connFd, path , 0);
     }    
-    else {
-        sprintf(buf,"Error 501, unsupported methods\r\n");
+    else 
+    {
+            time_t t = time(NULL);
+            struct tm *tm = localtime(&t);
+            char date[50];
+            strftime(date,sizeof(date),"%c",tm); 
+            sprintf(buf,
+            "HTTP/1.1 505, unsupported methods\r\n"
+            "Server: Tiny\r\n"
+            "Connection: close\r\n"
+            "Content-type: %s\r\n",date, "NULL");
         write_all(connFd,buf, strlen(buf));
-    }            
+        return ;
+    }
+}
+
+void submitTask(Task task){
+    pthread_mutex_lock(&mutexQueue);
+    taskQueue[taskCount] = task;
+    taskCount++;
+    pthread_mutex_unlock(&mutexQueue);
+    pthread_cond_signal(&condQueue);
+}
+
+
+void executeTask(Task* task){
+    serve_http(task->connFd,task->wwwRoot);
+    close(task->connFd);
+}
+
+void *startThread(void* args){
+    while(1){
+        Task task;
+        pthread_mutex_lock(&mutexQueue);
+        while(taskCount == 0){
+            pthread_cond_wait(&condQueue, &mutexQueue);
+        }
+        task = taskQueue[0];
+        int i;
+        for(i = 0; i < taskCount - 1; i++){
+            taskQueue[i] = taskQueue[i+1];
+        }
+        taskCount--;
+        pthread_mutex_unlock(&mutexQueue);
+        executeTask(&task);
+    }
 }
 
+
 int main(int argc, char* argv[])
 {
+    int THREAD_NUM;
+    int timeout;
     int c = 0;
     char listenPort[MAXBUF];
     char wwwRoot[MAXBUF];
@@ -128,16 +213,34 @@ int main(int argc, char* argv[])
     {
         {"port",      required_argument,       0,  'p' },
         {"root",      required_argument,       0,  'r' },
+        {"numthreads",required_argument,       0,  'n'},
+        {"timeout",   required_argument,       0,  't'},
         {0,0,0,0}
     };
-
     int long_index =0;
-    while ((c = getopt_long(argc, argv,"p:r:", long_options, &long_index )) != -1) {
+    while ((c = getopt_long(argc, argv,"p:r:n:t:", long_options, &long_index )) != -1) {
         switch (c) {
              case 'p' : strcpy(listenPort,optarg);
                  break;
              case 'r' : strcpy(wwwRoot,optarg);
                  break;
+             case 'n' : THREAD_NUM = atoi(optarg);
+                 break;
+             case 't' : timeout = atoi(optarg);
+                 break;    
+             default:
+                    printf("Invalid/Unknown option");
+                    return;
+        }
+    }
+
+    pthread_t threadPool[THREAD_NUM];
+    pthread_mutex_init(&mutexQueue, NULL);
+    pthread_mutex_init(&parseQueue, NULL);
+    pthread_cond_init(&condQueue, NULL);
+    for(int i = 0; i < THREAD_NUM; i++){
+        if(pthread_create(&threadPool[i], NULL, &startThread, NULL) != 0){
+            perror("Failed to create thread");
         }
     }
 
@@ -145,7 +248,6 @@ int main(int argc, char* argv[])
         printf("Invalid input");
         exit(-1);
     }
-
     // printf("%s\n",listenPort);
     // printf("%s\n",wwwRoot);
 
@@ -161,14 +263,28 @@ int main(int argc, char* argv[])
             sleep(1);
             continue; 
         }
+
         char hostBuf[MAXBUF], svcBuf[MAXBUF];
         if (getnameinfo((SA *) &clientAddr, clientLen, 
                         hostBuf, MAXBUF, svcBuf, MAXBUF, 0)==0) 
             printf("Connection from %s:%s\n", hostBuf, svcBuf);
         else
             printf("Connection from ?UNKNOWN?\n");
-        
-        serve_http(connFd, wwwRoot);
-        close(connFd);
+       
+        struct Task task;
+        task.connFd = connFd;
+        memcpy(&task.clientAddr, &clientAddr, sizeof(struct sockaddr_storage));
+        strcpy(task.wwwRoot, wwwRoot);
+        submitTask(task);
     }
+
+    for(int i = 0; i < THREAD_NUM; i++){
+        if (pthread_join(&threadPool[i],NULL) != 0){
+                perror("Failed to join thread\n");
+            }
+        }
+        pthread_mutex_destroy(&mutexQueue);
+        pthread_cond_destroy(&condQueue);
+
+    return 0;
 }
diff --git a/src/parse.c b/src/parse.c
index 84b80d5..d4bbf2d 100644
--- a/src/parse.c
+++ b/src/parse.c
@@ -65,3 +65,4 @@ Request * parse(char *buffer, int size, int socketFd) {
 	return NULL;
 }
 
+
diff --git a/src/test b/src/test
new file mode 100644
index 0000000..6ce5e8a
Binary files /dev/null and b/src/test differ
diff --git a/src/test.c b/src/test.c
new file mode 100644
index 0000000..8ad4336
--- /dev/null
+++ b/src/test.c
@@ -0,0 +1,18 @@
+#include<sys/types.h>
+#include<sys/socket.h>
+#include<netdb.h>
+#include<string.h>
+#include<stdlib.h>
+#include<stdio.h>
+#include<unistd.h>
+#include <arpa/inet.h>
+
+void main(){
+   struct sockaddr_in dest;
+
+   memset(&dest, '\0', sizeof(dest));
+   dest.sin_addr.s_addr = inet_addr("twitter.com");
+   dest.sin_port = 443;
+   dest.sin_family = AF_INET;
+   printf("%x %x %x %x" , dest.sin_family, dest.sin_port, dest.sin_addr, dest.sin_zero);
+}  
\ No newline at end of file
diff --git a/tempCodeRunnerFile.c b/tempCodeRunnerFile.c
new file mode 100644
index 0000000..63efcd2
--- /dev/null
+++ b/tempCodeRunnerFile.c
@@ -0,0 +1,11 @@
+#include<sys/types.h>
+#include<string.h>
+#include<stdlib.h>
+#include<stdio.h>
+#include<unistd.h>
+
+
+void main(){
+
+   printf("%x %x %x %x" ,0x68,0xF4,0x2A,0x01);
+}  
\ No newline at end of file
diff --git a/tempCodeRunnerFile.exe b/tempCodeRunnerFile.exe
new file mode 100644
index 0000000..e5abf7d
Binary files /dev/null and b/tempCodeRunnerFile.exe differ
